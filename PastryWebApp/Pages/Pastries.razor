@page   "/pastries"

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject PastryDbContext ctx
<br />

<h1 class="text-center">Gestisci prodotti</h1>

<div>
    <h3>Inserisci nuovo prodotto</h3>
    <table class="table">
        <tr class="card-header">
            <td>
                <label>Nome:</label>
                <input type="text" @bind-value="_newPastry.Name" />
            </td>
            <td>
                <label>Quantità prodotta:</label>
                <input type="number" @bind-value="_newPastry.Quantity" />
            </td>
            <td>
                <label>Data produzione:</label>
                <input type="date" @bind-value="_newPastry.ProductionDate" />
            </td>
            <td>
                <button class="btn btn-primary" @onclick="() => AddPastry()">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                </button>
            </td>
        </tr>
    </table>
</div>
<br />
<br />
<div>
    <h3>Lista prodotti in vetrina:</h3>
    <table class="table">
        <tr class="card-header">
            <td class="text-center">Nome</td>
            <td class="text-center">Quantità</td>
            <td class="text-center">Data produzione</td>
            <td class="text-center">Condizioni di vendita</td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        @foreach (var pastry in @_pastries)
        {
            <tr>
                <td class="text-center">@pastry.Name</td>
                <td class="text-center">@pastry.Quantity</td>
                <td class="text-center">@pastry.ProductionDate.ToString("dd/MM/yyyy")</td>
                @if (DateTime.Now - pastry.ProductionDate < TimeSpan.FromDays(1))
                {
                    <td class="text-center">Prezzo pieno</td>
                }
                else if (DateTime.Now - pastry.ProductionDate < TimeSpan.FromDays(2))
                {
                    <td class="text-center">Scontato -20%</td>
                }
                else if (DateTime.Now - pastry.ProductionDate < TimeSpan.FromDays(3))
                {
                    <td class="text-center">Scontato 50%</td>
                }
                else
                {
                    <td class="text-center">Non più vendibile</td>
                }
                <td>
                    <button class="btn btn-primary" @onclick="() => OpenEditPopup(pastry)">
                        Edita
                    </button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => NavigateToIngredients(pastry.Id)">
                        Ricetta
                    </button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => AskDeleteConfirmation(pastry)">
                        <span class="oi oi-minus" aria-hidden="true"></span>
                    </button>
                </td>
            </tr>
        }
    </table>

</div>

@if (_showEditPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edita prodotto</h3>
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>

                <div class="modal-body">
                    <label>Nome:</label>
                    <input class="form-control" type="text"
                           placeholder="Nome"
                           @bind="_editingPastry.Name" />
                    <br />
                    <label>Quantità:</label>
                    <input class="form-control" type="number"
                           placeholder="Quantità prodotta"
                           @bind="_editingPastry.Quantity" />
                    <br />
                    <label>Data produzione:</label>
                    <input class="form-control" type="date"
                           placeholder="Data Produzione"
                           @bind="_editingPastry.ProductionDate" />
                    <br />
                    <br />
                    <button class="btn btn-primary"
                            @onclick="SaveAndClose">
                        Salva
                    </button>
                    <span />
                    <button class="btn btn-primary"
                            @onclick="ClosePopup">
                        Anulla
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showDeletePopup)
{
    <ConfirmationComponent ConfirmationQuest="@_deletePastryMessage"
                           Argument="@_pastryToDelete"
                           Result="@OnDeleteConfirmation" />
}

@code {

    Pastry _newPastry;
    List<Pastry> _pastries;
    Pastry _editingPastry;
    PastryDal _dal;
    Pastry _pastryToDelete;
    bool _showEditPopup;
    bool _showDeletePopup;
    string _deletePastryMessage;


    protected override void OnInitialized()
    {
        _newPastry = new Database.Entities.Pastry();
        _dal = new PastryDal(ctx);
        ClosePopup();
        base.OnInitialized();
        LoadPastries();
        PrepareNewPastry();
    }

    protected void LoadPastries()
    {
        _pastries = _dal.GetAll();
    }

    protected void PrepareNewPastry()
    {
        _newPastry = new Database.Entities.Pastry();
        _newPastry.ProductionDate = DateTime.Now;
    }

    protected void AddPastry()
    {
        if (string.IsNullOrEmpty(_newPastry.Name) || _newPastry.Quantity == 0)
            return;
        _pastries.Add(_newPastry);
        _dal.Add(_newPastry);
        PrepareNewPastry();
    }


    protected void OpenEditPopup(PastryWebApp.Database.Entities.Pastry pastry)
    {
        _showEditPopup = true;
        _editingPastry = new Pastry
        {
            Id = pastry.Id,
            Name = pastry.Name,
            Quantity = pastry.Quantity,
            ProductionDate = pastry.ProductionDate,
            Ingredients = pastry.Ingredients
        };
    }

    protected void SaveAndClose()
    {
        _dal.Update(_editingPastry);
        var item = _pastries.Where(p => p.Id == _editingPastry.Id).First();
        item.Name = _editingPastry.Name;
        item.Quantity = _editingPastry.Quantity;
        item.ProductionDate = _editingPastry.ProductionDate;
        item.Ingredients = _editingPastry.Ingredients;
        ClosePopup();
    }

    protected void ClosePopup()
    {
        _showEditPopup = false;

    }
    private void AskDeleteConfirmation(Pastry pastry)
    {
        _pastryToDelete = pastry;
        _deletePastryMessage = $"Rimuovi {pastry.Name}?";
        _showDeletePopup = true;
    }

    private void OnDeleteConfirmation(bool result)
    {
        if (result)
        {
            _dal.Delete(_pastryToDelete);
            _pastries.Remove(_pastryToDelete);
        }
        _showDeletePopup = false;
    }


    private void NavigateToIngredients(int pastryId)
    {
        NavigationManager.NavigateTo($"/ingredients/{pastryId}");
    }

}
